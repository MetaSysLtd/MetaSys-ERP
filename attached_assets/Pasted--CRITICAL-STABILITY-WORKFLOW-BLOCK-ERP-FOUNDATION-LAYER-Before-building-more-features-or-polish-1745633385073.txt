[CRITICAL STABILITY & WORKFLOW BLOCK – ERP FOUNDATION LAYER]
Before building more features or polishing UI, you must fully implement and stabilize the core architecture and workflows across the ERP system.

This block includes the minimum required capabilities for MetaSys ERP to be considered stable, secure, and operationally viable.

🔹 SECTION 1: FOUNDATIONAL BLOCKS (MUST-HAVE)
1.1 USER MANAGEMENT & ROLE-BASED ACCESS CONTROL
✅ Fully implement the following:

Assign users to:

an Organization

a Team (Sales, Dispatch, HR, Finance)

a Role (Admin, Manager, Team Lead, Agent)

Allow setting of permissions per user:

View only

Create

Edit

Delete

✅ Permissions should restrict access to:

CRM (Leads)

Dispatch (Loads, Clients)

Finance (Invoices)

HR (Onboarding, Leave requests)

✅ Backend schema must include:

ts
Copy
Edit
users: {
  id,
  name,
  email,
  orgId,
  teamId,
  roleId,
  permissions: { canView: [], canEdit: [], canCreate: [], canDelete: [] }
}
✅ Show/hide modules in sidebar based on permissions.

✅ Return friendly error if user accesses restricted page:

“You don’t have permission to view this section. Contact your admin.”

1.2 VALIDATION & FALLBACK HANDLING
✅ Every form in the ERP must have:

Required fields flagged clearly

Field types validated:

Email format

CNIC length = 13 digits

Percentage values = between 0–100

Backend-side validation (Zod or express-validator)

✅ No form or DB function should accept null or undefined for critical fields.

✅ Add fallback defaults:

If no team found → show “Unassigned”

If no data in list view → show friendly empty state

✅ NEVER throw a crash like “Cannot convert undefined to object.” Handle all with fallbacks.

1.3 ERROR RECOVERY & SESSION MANAGEMENT
✅ If API fails (500/404), frontend shows banner:

“Something went wrong. We’re working on it.”

✅ Add /api/health check

✅ If session expires:

Auto logout and redirect to login

Show:

“Session expired. Please log in again.”

✅ Wrap all page loads in error boundaries — no blank screens.

1.4 NOTIFICATIONS & AUDIT TRAILS
✅ Every critical action must create a notification entry:

Lead converted → notify Sales Manager

Load booked → notify Dispatch Lead

Invoice sent → notify Dispatcher + Admin

New employee → notify HR

✅ Backend schema:

ts
Copy
Edit
notifications: {
  id,
  userId,
  orgId,
  title,
  body,
  read: false,
  linkTo: "/crm/leads/123"
}
✅ Add audit log for Admin:

Log action

User

Timestamp

Metadata

✅ Show last 10 system-level alerts on Admin Dashboard.

1.5 DASHBOARD ROLE-AWARENESS
✅ Dashboard must show data based on user role:

Agent sees: own leads, tasks, calls

Team Lead sees: own team

Manager sees: multiple teams

Admin sees: all data + KPIs

🔹 SECTION 2: CRITICAL INTERCONNECTED WORKFLOWS
These are cross-departmental flows between Sales, Dispatch, Invoicing, and Reporting.
They must be functionally complete and connected.

2.1 CRM → DISPATCH HANDOFF WORKFLOW
✅ In CRM (Leads):

When a sales agent selects status “Hand to Dispatch”

→ system should create a record in dispatch_clients

→ Dispatch Team Lead gets notification:

“New Lead Assigned: [Lead Name]”

✅ Dispatcher opens the lead and adds:

First Load info (origin, destination, value, service fee %)

Notes + POD upload (optional)

✅ Once first load is completed:

Lead status auto-updates to Active

Notification sent to:

Sales Agent

Admin

Dispatcher

Team Lead(s)

✅ This should be reflected across:

CRM “Status: Active”

Dispatch Clients view

Admin Dashboard → “New Onboarded Client”

2.2 DISPATCH → INVOICE FLOW
✅ For every completed load:

Dispatcher enters load details

System calculates dispatch fee using % stored against client

System generates invoice record

✅ On Sunday (weekly close):

System auto-batches invoices per carrier

Groups all loads

Sends invoice to carrier email (optional)

✅ Dispatcher + Admin get notified:

“Invoice sent to [Carrier Name]: $1,350”

✅ Admin Dashboard:

New card → “This Week’s Invoices”

Breakdown:

Total Invoice Value

Total Cleared

Total Pending

✅ Dispatcher can view:

Their own invoiced clients

Status: Sent / Paid / Overdue

2.3 TEAM REPORTING FLOW
✅ CRM & Dispatch must both generate:

Daily Summary (Slack + Email optional)

Weekly Recap:

Leads generated

Loads booked

Clients onboarded

Revenue booked

Invoice status

✅ Dashboard graphs should show:

CRM → Conversion rate, average touchpoints

Dispatch → Avg load value, per-agent booking

2.4 STATUS-SYNC LOGIC (SYSTEM-WIDE)
✅ Whenever status changes (e.g., lead becomes Active):

It must reflect in:

CRM

Dispatch Clients

Invoicing module

Admin Dashboard

Reports

Notifications

✅ Do NOT hardcode status updates in one place — make it socket-driven or DB-watched and synced.

2.5 END-TO-END FLOW TEST (MANDATORY)
✅ Ensure this path works completely:

Add CRM Lead

Sales marks “Hand to Dispatch”

Dispatcher adds First Load

System updates to “Active”

Invoice generates

Admin sees data on dashboard

All users receive relevant notifications

FINAL OUTPUT REQUIRED
✅ Once all these blocks are implemented:

No more crashes on login or data load

Every department’s core functionality is working

Handoff between modules is clean, visible, and logged

Admin dashboard shows correct KPI metrics

System is safe to start testing with real teams