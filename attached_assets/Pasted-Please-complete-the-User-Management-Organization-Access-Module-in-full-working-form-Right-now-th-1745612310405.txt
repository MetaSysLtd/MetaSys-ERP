Please complete the User Management & Organization Access Module in full working form. Right now, there are placeholder pages under “Settings” and “Admin Panel” for user/org management, but nothing is functional — no backend, schema, logic, or access controls. This must now be completed end-to-end.

GOAL
Allow System Admins to:

Create & manage organizations

Add/remove users

Assign users to organizations, departments (Sales, Dispatch, etc.), and teams

Set their roles (Agent, TL, Manager, Head, Super Admin)

Set granular permissions (e.g., view-only, edit, manage-users, reports-only, etc.)

Control access to modules (CRM, Dispatch, Invoices, Finance, HR, etc.) per role

Automatically reflect those permissions in the UI

1. DATABASE SCHEMA
1.1 organizations
ts
Copy
Edit
{
  _id,
  name: String,
  slug: String,
  industry: String,
  createdBy: userId,
  createdAt,
  settings: {
    timezone,
    slackWebhookURL,
    ...etc
  }
}
1.2 users
ts
Copy
Edit
{
  _id,
  email,
  name,
  orgId: ObjectId,         // links to `organizations`
  role: "agent" | "TL" | "manager" | "head" | "admin",
  department: "sales" | "dispatch" | "hr" | "finance" | "marketing",
  teamId: ObjectId | null,
  status: "active" | "invited" | "inactive",
  permissions: {
    canViewCRM: Boolean,
    canEditLeads: Boolean,
    canViewInvoices: Boolean,
    canApprovePayroll: Boolean,
    canManageUsers: Boolean,
    ... (make extensible)
  },
  createdAt,
  invitedAt,
  lastLogin
}
1.3 teams
ts
Copy
Edit
{
  _id,
  orgId,
  department: String, // sales, dispatch, etc.
  teamLeadId: userId,
  members: [userId]
}
2. API ENDPOINTS
POST /api/orgs → Create org

GET /api/orgs → List orgs

PATCH /api/orgs/:id → Update org

DELETE /api/orgs/:id

GET /api/users → With filters by orgId, role, status

POST /api/users/invite → Send invite email & create user doc with status = invited

PATCH /api/users/:id → Edit role, team, permissions

DELETE /api/users/:id → Disable account (status = inactive)

POST /api/teams → Create team

GET /api/teams?orgId=xyz → Fetch team structure

PATCH /api/teams/:id

3. FRONTEND UI
A. Organization Manager View (under Settings)
Table with all orgs

Actions: Edit org, Delete, Add new org

For each org: show member count, date created

B. User Management Page (Admin Panel)
Tabs: Active Users, Invited, Inactive

Table:

Name, Email, Role, Department, Team, Last Login, Status

Action column: Edit | Reset Password | Disable

“Add User” Button → Modal with:

Org (dropdown)

Department (dropdown)

Role (dropdown)

Team assignment (multi-select)

Checkboxes for: canViewCRM, canEditLeads, canManageUsers, etc.

“Invite User” triggers backend call + sends placeholder email with login instructions.

4. PERMISSION ENFORCEMENT (BACKEND + UI)
• Every major module should check user’s permissions before:

Rendering a route/component

Performing POST/PATCH calls

• Example:

js
Copy
Edit
if (!user.permissions.canEditLeads) {
  return res.status(403).send("Access Denied");
}
• In frontend:

tsx
Copy
Edit
{user.permissions.canViewInvoices && (
  <Route path="/invoices" element={<InvoiceModule />} />
)}
• Menu/sidebar dynamically updates based on permissions.

5. ADMIN DASHBOARD
• Add widget: “Org Users Overview”

Org name, Active users, TL count, Manager count

Links to drill into user/team list

6. UI DESIGN & BRANDING
• Use MetaSys ERP branding:

Teal (#025E73) as primary accent

Yellow (#F2A71B) on buttons and headers

Font = "Inter" or system sans-serif

Use modals/cards with drop shadow and rounded corners

• For role selector: use badge-style dropdown (Agent = blue, TL = yellow, etc.)

• Add “User Card” mini-popup: hover on user in any table shows role, dept, team.

7. INTEGRATIONS
• Later: add Slack Webhook to notify admin when a new user is added or deactivated
• Store Slack Webhook per org in org.settings.slackWebhookURL

8. SOCKET INTEGRATION
• When a new user is invited or activated:

Emit userAdded socket

Dashboard and team pages should refresh users in real-time

9. TEST CASES
• Unit tests for each permission gate
• Cypress flow:

Admin invites → user appears in “Invited”

Change team → reflected in /teams

Login as TL → see only their team in CRM

Login as Dispatch Rep → can only see clients assigned

10. RETURN
Return PASS when: • /api/users and /api/orgs are live
• Users can be invited, edited, and assigned
• Roles + teams are working
• Sidebar & dashboards dynamically adapt
• Permissions enforced across modules
• Sample user roles tested and passed

