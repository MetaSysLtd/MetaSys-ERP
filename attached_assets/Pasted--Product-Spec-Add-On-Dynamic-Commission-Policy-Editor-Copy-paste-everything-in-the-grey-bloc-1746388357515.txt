📑 Product‑Spec Add‑On — “Dynamic Commission Policy Editor”

(Copy–paste everything in the grey block to Replit‑Bot. No line‑breaks omitted.)

GOAL
• Give users with role = System Admin (or Finance‑Admin) a safe UI to CREATE / EDIT / ARCHIVE commission rules
  without touching code. All downstream calculations (monthly cron, dashboards, exports) must pick up the
  latest active policy automatically.

SCOPE
A. Dispatch‑Sales commission table & bonuses defined in the prior spec
B. Future: allow additional policies (e.g., Dispatch‑Agent, SaaS‑Sales) — make the model generic

REQUIREMENTS
1. DB MODEL
   • table commission_policy
     - id (uuid) PK
     - name varchar              → e.g., “Dispatch‑Sales v2024‑05”
     - scope enum                → (“dispatch_sales”, “dispatch_agent”, “saas_sales”…)
     - jsonb rules               → stores tiers, bonuses, split rules, formulas
     - is_active boolean         → only one active per scope
     - valid_from date, valid_to date nullable
     - created_by, created_at, updated_at

2. ADMIN UI
   Path:  **Admin Panel ▸ Compensation ▸ Commission Policies**
   a. List View
      ▪ columns: Name | Scope | Active? | Valid From | Valid To | Actions(edit/duplicate/archive)
   b. Editor Modal
      ▪ Step‑wizard style
        ① Basic info  (name, scope, effective dates, active toggle)
        ② Tiers table:
           • rows: “Min Active Leads” & “Commission PKR”
           • add / delete rows
        ③ Adjustments:
           • Starter % / Closer %
           • Inbound multiplier
        ④ Bonuses:
           checkbox + amount fields for
           • Sales Rep of Month
           • Active Trucks > N
           • Team Lead after target
        ⑤ Preview JSON + “Validate” (runs client‑side lint → schema)
      ▪ Save → POST /api/admin/commission‑policies (create draft)  
      ▪ Publish → sets is_active true; automatically sets previous active to false (same scope)

   ⚠️ Guard‑rails  
   • Cannot delete an active policy; must “Archive” (sets valid_to = yesterday, is_active=false).  
   • Validation: tiers must be ascending by Min Leads, bonus amounts ≥ 0,  percentages 0‑100.  

3. BACK‑END IMPACT
   • Cron job & real‑time commission previews must query the **currently active policy** by scope & date.
   • Use policy.rules JSON to compute payouts; no magic numbers in code.
   • On historical months always pick policy whose valid_from/valid_to span that month.

4. PERMISSIONS
   • Only roles: SYSTEM_ADMIN, FINANCE_ADMIN can view / edit policies.
   • READ‑ONLY view for DISPATCH_MANAGER and SALES_MANAGER.

5. MIGRATIONS
   • Seed with initial policy “Dispatch‑Sales v1” containing the table & bonuses already coded.
   • Write migration/fallback so if no active policy exists → abort commission‑run & alert admins.

6. UI/UX POLISH
   • Show a yellow “This is a Draft, not Active” banner inside editor until published.
   • Changes propagate next time cron runs; cron logs which policy ID used.
   • Dashboard badge shows “Policy: Dispatch‑Sales v2024‑05”.

7. ACCEPTANCE TEST
   □ Create a clone of current policy, modify tier 3 amount, publish → cron should pay new amount.  
   □ Archive policy → next cron should fail with “No active policy”, notification to Slack #alerts.  
   □ Attempt edit by normal “Sales_Agent” → 403 Forbidden.

DELIVERABLE
Return `PASS: Dynamic commission policy editor deployed` after UI + API + migration complete and tests pass.


---

Why this matters

Puts compensation control in business hands, not devs

Prevents accidental breakage: rules live in JSON, validated, versioned

Future‑proof: same framework can power Dispatcher agent commissions, bonuses, etc.


Once Replit‑Bot confirms completion and you’ve verified in the Admin Panel, we can continue to the next step.

