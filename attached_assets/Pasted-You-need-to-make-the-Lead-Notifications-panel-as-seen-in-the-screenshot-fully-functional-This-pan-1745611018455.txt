You need to make the Lead Notifications panel (as seen in the screenshot) fully functional. This panel is one of the most important UI elements, especially for the Sales and Dispatch teams, and must reflect real-time updates based on changes in CRM and Dispatch modules.

Please follow these detailed backend and frontend instructions:

1. Role-based Visibility
This panel should be visible to all users with roles: Sales Rep, Sales TL, Sales Manager, Dispatch Rep, Dispatch TL, Dispatch Manager, Head of Dispatch/Sales, and Super Admin.

It should NOT be visible for users under HR, Finance, Marketing, or other departments.

Use user.role or user.department to conditionally render this component.

Admins see all leads, filtered by status and assignee.

Non-admin users see only their own assigned leads or leads owned by their direct subordinates (in case of TL or Manager).

2. Backend – API Endpoints
Add a dedicated endpoint:

pgsql
Copy
Edit
GET /api/notifications/leads?userId=xyz&role=sales&range=30d
It should return 4 categories of lead alerts:

Assigned Leads: Leads where assignedTo = currentUser and status = "New" or "HandToDispatch" in the last 3 days.

Follow-up: Leads owned by the user where lastUpdated > 7 days ago AND status != "Active" OR "Lost".

Inactive: Leads where status = "InProgress" or "HandToDispatch" and no remark or change in last 10 days.

Status Changes: Leads where statusChangedAt >= now() - 2 days.

All logic should use orgId and userId in queries to ensure role-based filtering.

3. Real-time Updates via WebSocket
On any lead update (created, assigned, status change, remark added), emit:

php
Copy
Edit
socket.emit("leadNotification", {
  userId: lead.assignedTo,
  type: "Assigned" | "FollowUp" | "Inactive" | "StatusChange",
  leadId,
  message,
  status,
  time: new Date()
});
All relevant users should listen to this and update the UI immediately.

4. Frontend – UI Updates
Each tab in the Lead Notifications panel must:

Load its category-specific leads via the API.

Show a loading shimmer during fetch.

Show toast or badge when new notification appears (via socket).

Use color indicators:

Assigned = Yellow pill

Follow-up = Teal pill

Inactive = Red text + warning icon

Status Changes = Purple text

Clicking a row opens a modal/drawer:

Lead name

Assigned date

Status

Last activity

Quick actions: “View in CRM” / “Change Status” / “Add Remark”

5. UX Behaviors
If all 4 tabs return empty, show a blank state with bell icon and text like: “No active notifications. You’re all caught up.”

Store user’s last selected tab in localStorage and default to it on return.

Make the tab sticky at the top while scrolling on small screens.

6. Testing
Add Cypress flow:

Sales user creates lead → appears in “Assigned”

Wait 7 days → “Follow-up” kicks in

Change status → “Status Change” triggers

No update → “Inactive” after 10 days

Write Jest unit test for backend filtering logic per tab category.

Once implemented, return PASS with:

/api/notifications/leads sample payload

Socket log: leadNotification event test fire

Screenshot of panel with at least 2 active rows

Cypress test flow summary